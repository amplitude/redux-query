/**
 * Cancel On Unmount
 * =================
 *
 * This example demos `connectRequest` cancellation when it unmounts.
 * It also demonstrates how setting `force` to `true` in a query config changes
 * the loading behavior.
 *
 * View the "Redux Log" tab to see the actions that are dispatched.
 * Notice the "@@query/CANCEL_QUERY" actions that are dispatched when
 * redux-query cancels requests.
 */

/**
 * Imports
 * -------
 *
 * Available packages: react, redux, react-redux, and redux-query.
 */

import React, { Component } from 'react';
import { applyMiddleware, createStore, combineReducers, compose } from 'redux';
import { connect, Provider } from 'react-redux';
import {
  connectRequest,
  entitiesReducer,
  queriesReducer,
  queryMiddleware,
  querySelectors,
} from 'redux-query';

/**
 * Set up redux and redux-query
 * ----------------------------
 */

// Include the queries and entities reducer with your other reducers.
const reducer = combineReducers({
  entities: entitiesReducer,
  queries: queriesReducer,
});

// Tell redux-query where the queries and entities reducers are.
const middleware = queryMiddleware(
  state => state.queries,
  state => state.entities
);

const store = createStore(reducer, applyMiddleware(middleware));

/**
 * Application code
 * ----------------
 */

const helloRequest = (force = false) => ({
  url: '/api/hello',
  update: {
    message: (prev, next) => next,
  },
  force,
});

class HelloWorld extends Component {
  render() {
    const { props } = this;
    return (
      <div>
        <div>{props.isLoading && <em>Loading...</em>}</div>
        <h1>
          {props.message
            ? <span>Hello, {props.message}!</span>
            : <span>Hello?</span>}
        </h1>
      </div>
    );
  }
}

// Map redux state to props. This is ordinary react-redux usage â€“ we're just
// reading from the entities state.
const mapStateToProps = state => ({
  isLoading: querySelectors.isPending(helloRequest())(state.queries),
  message: state.entities.message,
});

// Map props from `mapStateToProps` to a request query config.
const mapPropsToConfig = props => helloRequest(props.force);

const HelloWorldContainer = compose(
  connect(mapStateToProps),
  connectRequest(mapPropsToConfig)
)(HelloWorld);

class App extends Component {
  state = {
    componentMounted: false,
    isForceEnabled: false,
  };

  render() {
    const { state } = this;
    return (
      <Provider store={store}>
        <div>
          {state.componentMounted ? <button
                onClick={() => {
                  this.setState({
                    componentMounted: false,
                  });
                }}>Unmount Hello World Component</button> : <button
                onClick={() => {
                  this.setState({
                    componentMounted: true,
                  });
                }}>Mount Hello World Component</button>}
          <label>
            <input
              type="checkbox"
              value={state.isForceEnabled}
              onChange={e => {
                this.setState({
                  isForceEnabled: e.target.checked,
                });
              }}
            />Force
          </label>
          <hr />
          {state.componentMounted &&
            <HelloWorldContainer force={state.isForceEnabled} />}
        </div>
      </Provider>
    );
  }
}

// The default export should be the main React component.
export default App;
