// Available packages: react, redux, react-redux, and redux-query

import React, { Component } from 'react';
import { applyMiddleware, createStore, combineReducers, compose } from 'redux';
import { connect, Provider } from 'react-redux';
import { connectRequest, entitiesReducer, queriesReducer, queryMiddleware } from 'redux-query';

// Set up redux and redux-query

const inputReducer = (state = '', action) => {
  if (action.type === 'CHANGE_INPUT') {
    return action.input;
  }

  return state;
};

const reducer = combineReducers({
  entities: entitiesReducer,
  queries: queriesReducer,
  input: inputReducer,
});

const middleware = queryMiddleware((state) => state.queries, (state) => state.entities);

const store = createStore(reducer, applyMiddleware(middleware));

// Application code

const echoRequest = (input) => {
  return {
    url: `/api/echo?input=${input}`,
    transform: (body, text) => ({
      response: text,
    }),
    update: {
      response: (prev, next) => next,
    },
  };
};

class Echo extends Component {
  render() {
    const { props } = this;

    return (
      <div>
        <label>
          Input:
          {' '}
          <input type="text" value={props.input} onChange={(e) => props.changeInput(e.target.value)} />
        </label>
        <div>Response: {this.props.response}</div>
        <hr />
        <div>
          Note: if you type into the input field fast enough, pending requests will be cancelled.
        </div>
        <div>
          Look for "<span style={{ fontFamily: 'monospace' }}>@@query/CANCEL_QUERY</span>"" actions in the "Redux Log" tab.
        </div>
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  input: state.input,
  response: state.entities.response,
});

const mapDispatchToProps = (dispatch) => ({
  changeInput: (input) => dispatch({
    type: 'CHANGE_INPUT',
    input,
  }),
});

const mapPropsToConfig = (props) => echoRequest(props.input);

const EchoContainer = compose(
  connect(mapStateToProps, mapDispatchToProps),
  connectRequest(mapPropsToConfig)
)(Echo);

class App extends Component {
  render() {
    return (
      <Provider store={store}>
        <EchoContainer />
      </Provider>
    );
  }
}

// The default export should be the main React component

export default App;
