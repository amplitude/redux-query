/**
 * Hacker News
 * ===========
 *
 * This example uses Hacker New's Firebase REST API
 * (https://github.com/HackerNews/API) to render the top 30 stories.
 */

/**
 * Imports
 * -------
 *
 * Available packages: react, redux, react-redux, and redux-query.
 */

import React, { Component } from 'react';
import { applyMiddleware, createStore, combineReducers, compose } from 'redux';
import { connect, Provider } from 'react-redux';
import {
  connectRequest,
  entitiesReducer,
  queriesReducer,
  queryMiddleware,
  querySelectors,
} from 'redux-query';

/**
 * Set up redux and redux-query
 * ----------------------------
 */

// Include the queries and entities reducer with your other reducers.
const reducer = combineReducers({
  entities: entitiesReducer,
  queries: queriesReducer,
});

// Tell redux-query where the queries and entities reducers are.
const middleware = queryMiddleware(
  state => state.queries,
  state => state.entities
);

const store = createStore(reducer, applyMiddleware(middleware));

/**
 * Query config creators
 * ---------------------
 */

const topStoriesRequest = () => {
  return {
    url: `https://hacker-news.firebaseio.com/v0/topstories.json`,
    transform: body => ({
      // The server responds with an array of IDs
      topStoryIds: body,
    }),
    update: {
      topStoryIds: (prev, next) => {
        // Discard previous `response` value (we don't need it anymore).
        return next;
      },
    },
  };
};

const itemRequest = itemId => {
  return {
    url: `https://hacker-news.firebaseio.com/v0/item/${itemId}.json`,
    transform: body => ({
      // The server responds with the metadata for that item
      itemsById: {
        [itemId]: body,
      },
    }),
    update: {
      itemsById: (prev, next) => {
        return {
          ...prev,
          ...next,
        };
      },
    },
  };
};

/**
 * Selectors
 * ---------
 */

const selectTopStoryIds = state => {
  return state.entities.topStoryIds || [];
};

const selectItem = (state, props) => {
  return (state.entities.itemsById || {})[props.itemId];
};

/**
 * Item component and container
 * ----------------------------
 */

class Item extends Component {
  render() {
    const { props } = this;

    return (
      <li>
        {props.isLoading && '...'}
        {props.item &&
          <div>
            <div>
              <a href={props.item.url} target="_blank">{props.item.title}</a>
            </div>
            <div>
              {props.item.score}
              {' '}
              points by
              {' '}
              <a
                href={`https://news.ycombinator.com/user?id=${props.item.by}`}
                target="_blank">
                {props.item.by}
              </a>
            </div>
          </div>}
      </li>
    );
  }
}

const ItemContainer = compose(
  connect((state, props) => {
    const query = itemRequest(props.itemId);
    return {
      isLoading: querySelectors.isPending(query)(state.queries),
      item: selectItem(state, props),
      query,
    };
  }),
  connectRequest(props => props.query)
)(Item);

/**
 * Top Stories component and container
 * -----------------------------------
 */

class TopStories extends Component {
  render() {
    const { props } = this;

    return (
      <ol>
        {props.topStoryIds
          .slice(0, 30)
          .map(itemId => <ItemContainer itemId={itemId} />)}
      </ol>
    );
  }
}

const TopStoriesContainer = compose(
  connect(state => ({
    topStoryIds: selectTopStoryIds(state),
  })),
  connectRequest(() => topStoriesRequest())
)(TopStories);

/**
 * The main app component
 * ----------------------
 */

class HackerNews extends Component {
  render() {
    return (
      <Provider store={store}>
        <div>
          <h1>Hacker News</h1>
          <TopStoriesContainer />
        </div>
      </Provider>
    );
  }
}

// The default export should be the main React component.
export default HackerNews;
