import React, { Component } from 'react';
import { applyMiddleware, createStore, combineReducers, compose } from 'redux';
import { connect, Provider } from 'react-redux';
import { connectRequest, entitiesReducer, queriesReducer, queryMiddleware } from 'redux-query';

/* Redux Setup */

const reducer = combineReducers({
    entities: entitiesReducer,
    queries: queriesReducer,
});

const middleware = queryMiddleware((state) => state.entities, (state) => state.queries);

const store = createStore(reducer, compose(applyMiddleware(middleware)));

/* Application Code */

const helloQuery = () => ({
  url: '/api/hello',
  update: {
    message: (prev, next) => next,
  },
});

class HelloWorld extends Component {
  render() {
    return (
      <h1>
        {this.props.message ?
          <span>Hello, {this.props.message}!</span>
          :
          <span>Hello?</span>
        }
      </h1>
    );
  }
}

const mapStateToProps = (state) => ({
  message: state.entities.message,
});

const HelloWorldContainer = compose(
  connect(mapStateToProps),
  connectRequest(() => helloQuery())
)(HelloWorld);

class App extends Component {
  render() {
    return (
      <Provider store={store}>
        <HelloWorldContainer />
      </Provider>
    );
  }
}

export default App;
