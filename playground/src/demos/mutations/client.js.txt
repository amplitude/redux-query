/**
 * Mutations
 * =========
 *
 * This example demos making mutations with `mutateAsync`.
 *
 * Mutations are used for destructive actions, like changing some persistent
 * data on the server or in a database.
 *
 * Type into the input field and press the "Submit" button to trigger the
 * mutation to change your name.
 *
 * Click "I'm Feeling Optimistic" to how optimistic updates behave.
 *
 * The server does basic input validation - if you don't provide a name, or if
 * the name has leading or trailing spaces then it will reply with a 400 status
 * code and an error message.
 *
 * This example takes advantage of mutateAsync's promise interface to update
 * the UI to reflect the status of the mutation.
 */

/**
 * Imports
 * -------
 *
 * Available packages: react, redux, react-redux, and redux-query.
 */

import React, { Component } from 'react';
import { applyMiddleware, createStore, combineReducers, compose } from 'redux';
import { connect, Provider } from 'react-redux';
import {
  connectRequest,
  entitiesReducer,
  queriesReducer,
  queryMiddleware,
  mutateAsync,
} from 'redux-query';

/**
 * Set up redux and redux-query
 * ----------------------------
 */

// Include the queries and entities reducer with your other reducers.
const reducer = combineReducers({
  entities: entitiesReducer,
  queries: queriesReducer,
});

// Tell redux-query where the queries and entities reducers are.
const middleware = queryMiddleware(
  state => state.queries,
  state => state.entities
);

const store = createStore(reducer, applyMiddleware(middleware));

/**
 * Application code
 * ----------------
 */

const queries = {
  nameRequest: () => {
    return {
      url: `/api/name`,
      update: {
        name: (prev, next) => next,
      },
    };
  },
  changeNameMutation: (name, optimistic) => {
    const queryConfig = {
      url: `/api/change-name`,
      body: {
        name,
      },
      update: {
        name: (prev, next) => next,
      },
    };

    if (optimistic) {
      queryConfig.optimisticUpdate = {
        name: () => name,
      };
    }

    return queryConfig;
  },
};

const actions = {
  changeName: (name, optimistic) =>
    mutateAsync(queries.changeNameMutation(name, optimistic)),
};

class NameForm extends Component {
  state = {
    inputValue: '',
    isLoading: false,
    result: null,
    error: null,
  };

  submit(options = {}) {
    const { props, state } = this;

    // Set a loading state so we can show a loading indicator.
    this.setState({
      isLoading: true,
    });

    // This will lead to a mutation being dispatched (configured by
    // `mapDispatchToProps` below).
    props.changeName(state.inputValue, options.optimistic).then(result => {
      // We can promise-chain on the mutation action to trigger state
      // transitions when it succeeds or fails.
      if (result.status >= 200 && result.status < 300) {
        this.setState({
          inputValue: '',
          isLoading: false,
          result: 'success',
        });
      } else {
        this.setState({
          isLoading: false,
          result: 'failure',
          error: result.text,
        });
      }
    });
  }

  render() {
    const { props, state } = this;

    return (
      <div>
        <h3>Your Name</h3>
        <p>{props.name || <em>(no name)</em>}</p>
        <hr />
        <h3>Change Name</h3>
        <form
          onSubmit={e => {
            // Prevent default form behavior.
            e.preventDefault();
          }}>
          <input
            type="text"
            value={state.inputValue}
            placeholder="Enter a name"
            disabled={state.isLoading}
            onChange={e => {
              this.setState({
                inputValue: e.target.value,
              });
            }}
          />
          <input
            type="submit"
            value="Submit"
            onClick={() => this.submit()}
            disabled={state.isLoading}
          />
          <input
            type="submit"
            value="I'm Feeling Optimistic"
            onClick={() => this.submit({ optimistic: true })}
            disabled={state.isLoading}
          />
          {state.isLoading === true && <p>Loading...</p>}
          {!state.isLoading && state.result === 'success' && <p>Success!</p>}
          {!state.isLoading &&
            state.result === 'failure' &&
            <p>An error occurred: "{state.error}".</p>}
        </form>
      </div>
    );
  }
}

const mapStateToProps = state => ({
  name: state.entities.name,
});

const mapDispatchToProps = {
  changeName: actions.changeName,
};

const mapPropsToConfig = () => queries.nameRequest();

const NameFormContainer = compose(
  connect(mapStateToProps, mapDispatchToProps),
  connectRequest(mapPropsToConfig)
)(NameForm);

class App extends Component {
  render() {
    return (
      <Provider store={store}>
        <NameFormContainer />
      </Provider>
    );
  }
}

// The default export should be the main React component.
export default App;
