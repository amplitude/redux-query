/**
 * Usage with redux-saga
 * =====================
 *
 * This example extends the "Mutations" example to demo how redux-query can be
 * used with redux-saga. It has the same behavior, with one minor difference.
 * The input fields and buttons are not disabled when a change is in-flight, so
 * you can make more than one mutation at a time. When this happens, the
 * in-flight mutation is cancelled, taking advantage of redux-saga's
 * task cancellation APIs.
 *
 * View the "Redux Log" tab to see the actions that are dispatched.
 * Notice the "@@query/CANCEL_QUERY" actions that are dispatched when
 * redux-query cancels requests.
 */

/**
 * Imports
 * -------
 *
 * Available packages: react, redux, react-redux, redux-query, and redux-saga.
 */

import React, { Component } from 'react';
import { applyMiddleware, createStore, combineReducers } from 'redux';
import { connect, Provider } from 'react-redux';
import {
  entitiesReducer,
  queriesReducer,
  queryMiddleware,
  mutateAsync,
  requestAsync,
  cancelQuery,
  getQueryKey,
} from 'redux-query';
import createSagaMiddleware, { takeLatest } from 'redux-saga';
import { cancelled, put } from 'redux-saga/effects';

/**
 * Set up redux and redux-query
 * ----------------------------
 */

const nameReducer = (state = {}, action) => {
  switch (action.type) {
    case 'CHANGE_NAME':
      return { ...state, isLoading: true, error: null, result: null };
    case 'CHANGE_NAME_FAILED':
      return {
        ...state,
        isLoading: false,
        error: action.error,
        result: 'failure',
      };
    case 'CHANGE_NAME_SUCCEEDED':
      return { ...state, isLoading: false, error: null, result: 'success' };
  }

  return state;
};

// Include the queries and entities reducer with your other reducers.
const reducer = combineReducers({
  entities: entitiesReducer,
  queries: queriesReducer,
  name: nameReducer,
});

// Tell redux-query where the queries and entities reducers are.
const middleware = queryMiddleware(
  state => state.queries,
  state => state.entities
);

const sagaMiddleware = createSagaMiddleware();

const store = createStore(reducer, applyMiddleware(middleware, sagaMiddleware));

/**
 * Query config creators
 * ---------------------
 */

const queries = {
  nameRequest: () => {
    return {
      url: `/api/name`,
      update: {
        name: (prev, next) => next,
      },
    };
  },
  changeNameMutation: (name, optimistic) => {
    const queryConfig = {
      url: `/api/change-name`,
      body: {
        name,
      },
      update: {
        name: (prev, next) => next,
      },
    };

    if (optimistic) {
      queryConfig.optimisticUpdate = {
        name: () => name,
      };
    }

    return queryConfig;
  },
};

/**
 * Actions
 * ---------------------
 */

const actions = {
  changeName: (name, optimistic) => {
    return {
      type: 'CHANGE_NAME',
      name,
      optimistic,
    };
  },
  nameChangeSucceeded: () => {
    return {
      type: 'CHANGE_NAME_SUCCEEDED',
    };
  },
  nameChangeFailed: error => {
    return {
      type: 'CHANGE_NAME_FAILED',
      error,
    };
  },
};

/**
 * Sagas
 * -----
 */

function* requestName() {
  // Request the name when the root saga runs.
  yield put.sync(requestAsync(queries.nameRequest()));
}

function* changeName(action) {
  const query = queries.changeNameMutation(action.name, action.optimistic);

  try {
    // We can capture the result from the mutateAsync promise using `put.sync`.
    const result = yield put.sync(mutateAsync(query));

    if (result.status >= 200 && result.status < 300) {
      yield put(actions.nameChangeSucceeded());
    } else {
      yield put(actions.nameChangeFailed(result.text));
    }
  } finally {
    if (yield cancelled()) {
      // When this saga is cancelled because another CHANGE_NAME action was
      // dispatched, we can cancel the in-flight query here.
      yield put(cancelQuery(getQueryKey(query)));
    }
  }
}

function* rootSaga() {
  yield [
    requestName(),
    takeLatest(action => action.type === 'CHANGE_NAME', changeName),
  ];
}

sagaMiddleware.run(rootSaga);

/**
 * Name form component and container
 * ---------------------------------
 */

class NameForm extends Component {
  state = {
    inputValue: '',
  };

  submit(options = {}) {
    const { props, state } = this;

    // This will lead to a mutation being dispatched (configured by
    // `mapDispatchToProps` below).
    props.changeName(state.inputValue, options.optimistic);
  }

  render() {
    const { props, state } = this;

    return (
      <div>
        <h3>Your Name</h3>
        <p>{props.name || <em>(no name)</em>}</p>
        <hr />
        <h3>Change Name</h3>
        <form
          onSubmit={e => {
            // Prevent default form behavior.
            e.preventDefault();
          }}>
          <input
            type="text"
            value={state.inputValue}
            placeholder="Enter a name"
            onChange={e => {
              this.setState({
                inputValue: e.target.value,
              });
            }}
          />
          <input type="submit" value="Submit" onClick={() => this.submit()} />
          <input
            type="submit"
            value="I'm Feeling Optimistic"
            onClick={() => this.submit({ optimistic: true })}
          />
          {props.isLoading === true && <p>Loading...</p>}
          {!props.isLoading && props.result === 'success' && <p>Success!</p>}
          {!props.isLoading &&
            props.result === 'failure' &&
            <p>An error occurred: "{props.error}".</p>}
        </form>
      </div>
    );
  }
}

const mapStateToProps = state => ({
  error: state.name.error,
  isLoading: state.name.isLoading,
  name: state.entities.name,
  result: state.name.result,
});

const mapDispatchToProps = {
  changeName: actions.changeName,
};

const NameFormContainer = connect(mapStateToProps, mapDispatchToProps)(
  NameForm
);

/**
 * The main app component
 * ----------------------
 */

class App extends Component {
  render() {
    return (
      <Provider store={store}>
        <NameFormContainer />
      </Provider>
    );
  }
}

// The default export should be the main React component.
export default App;
