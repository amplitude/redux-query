/**
 * Updating from Props
 * ===================
 *
 * This example demos `connectRequest` cancellation when its props update.
 *
 * Type into the input field. If you type faster than the server is able to
 * keep up (it's artificially slowed down), then requests will be cancelled.
 *
 * View the "Redux Log" tab to see the actions that are dispatched.
 * Notice the "@@query/CANCEL_QUERY" actions that are dispatched when
 * redux-query cancels requests.
 */

/**
 * Imports
 * -------
 *
 * Available packages: react, redux, react-redux, and redux-query.
 */

import React, { Component } from 'react';
import { applyMiddleware, createStore, combineReducers, compose } from 'redux';
import { connect, Provider } from 'react-redux';
import {
  connectRequest,
  entitiesReducer,
  queriesReducer,
  queryMiddleware,
} from 'redux-query';

/**
 * Set up redux and redux-query
 * ----------------------------
 */

// A simple reducer for this application to manage input state.
const inputReducer = (state = '', action) => {
  if (action.type === 'CHANGE_INPUT') {
    return action.input;
  }

  return state;
};

// Include the queries and entities reducer with your other reducers.
const reducer = combineReducers({
  entities: entitiesReducer,
  queries: queriesReducer,
  input: inputReducer,
});

// Tell redux-query where the queries and entities reducers are.
const middleware = queryMiddleware(
  state => state.queries,
  state => state.entities
);

const store = createStore(reducer, applyMiddleware(middleware));

/**
 * Application code
 * ----------------
 */

const echoRequest = input => {
  return {
    url: `/api/echo?input=${input}`,
    transform: (body, text) => ({
      // The server responds with raw text, not JSON, so need a transform step
      // here to map the text to an entity.
      response: text,
    }),
    update: {
      response: (prev, next) => {
        // Discard previous `response` value (we don't need it anymore).
        return next;
      },
    },
  };
};

class Echo extends Component {
  render() {
    const { props } = this;

    return (
      <div>
        <label>
          Input:
          {' '}
          <input
            type="text"
            value={props.input}
            onChange={e => props.changeInput(e.target.value)}
          />
        </label>
        <div>Response: {this.props.response}</div>
      </div>
    );
  }
}

// Map redux state to props. This is ordinary react-redux usage â€“ we're just
// also reading from the entities state.
const mapStateToProps = state => ({
  input: state.input,
  response: state.entities.response,
});

// Map dispatch to props. This is ordinary react-redux usage.
const mapDispatchToProps = dispatch => ({
  changeInput: input => dispatch({
    type: 'CHANGE_INPUT',
    input,
  }),
});

// Map props from `mapStateToProps` to a request query config.
const mapPropsToConfig = props => echoRequest(props.input);

const EchoContainer = compose(
  connect(mapStateToProps, mapDispatchToProps),
  connectRequest(mapPropsToConfig)
)(Echo);

class App extends Component {
  render() {
    return (
      <Provider store={store}>
        <EchoContainer />
      </Provider>
    );
  }
}

// The default export should be the main React component.
export default App;
